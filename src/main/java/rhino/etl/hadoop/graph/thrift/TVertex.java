/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rhino.etl.hadoop.graph.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVertex implements org.apache.thrift.TBase<TVertex, TVertex._Fields>, java.io.Serializable, Cloneable, Comparable<TVertex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVertex");

  private static final org.apache.thrift.protocol.TField RHINO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rhinoId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TITAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("titanId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField OUT_EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("outEdges", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IN_EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("inEdges", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVertexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVertexTupleSchemeFactory());
  }

  public long rhinoId; // optional
  public long titanId; // optional
  public Map<String,Item> properties; // optional
  public List<TEdge> outEdges; // optional
  public List<TEdge> inEdges; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RHINO_ID((short)1, "rhinoId"),
    TITAN_ID((short)2, "titanId"),
    PROPERTIES((short)3, "properties"),
    OUT_EDGES((short)4, "outEdges"),
    IN_EDGES((short)5, "inEdges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RHINO_ID
          return RHINO_ID;
        case 2: // TITAN_ID
          return TITAN_ID;
        case 3: // PROPERTIES
          return PROPERTIES;
        case 4: // OUT_EDGES
          return OUT_EDGES;
        case 5: // IN_EDGES
          return IN_EDGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RHINOID_ISSET_ID = 0;
  private static final int __TITANID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RHINO_ID,_Fields.TITAN_ID,_Fields.PROPERTIES,_Fields.OUT_EDGES,_Fields.IN_EDGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RHINO_ID, new org.apache.thrift.meta_data.FieldMetaData("rhinoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITAN_ID, new org.apache.thrift.meta_data.FieldMetaData("titanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
    tmpMap.put(_Fields.OUT_EDGES, new org.apache.thrift.meta_data.FieldMetaData("outEdges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class))));
    tmpMap.put(_Fields.IN_EDGES, new org.apache.thrift.meta_data.FieldMetaData("inEdges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVertex.class, metaDataMap);
  }

  public TVertex() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVertex(TVertex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rhinoId = other.rhinoId;
    this.titanId = other.titanId;
    if (other.isSetProperties()) {
      Map<String,Item> __this__properties = new HashMap<String,Item>(other.properties.size());
      for (Map.Entry<String, Item> other_element : other.properties.entrySet()) {

        String other_element_key = other_element.getKey();
        Item other_element_value = other_element.getValue();

        String __this__properties_copy_key = other_element_key;

        Item __this__properties_copy_value = new Item(other_element_value);

        __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
      }
      this.properties = __this__properties;
    }
    if (other.isSetOutEdges()) {
      List<TEdge> __this__outEdges = new ArrayList<TEdge>(other.outEdges.size());
      for (TEdge other_element : other.outEdges) {
        __this__outEdges.add(new TEdge(other_element));
      }
      this.outEdges = __this__outEdges;
    }
    if (other.isSetInEdges()) {
      List<TEdge> __this__inEdges = new ArrayList<TEdge>(other.inEdges.size());
      for (TEdge other_element : other.inEdges) {
        __this__inEdges.add(new TEdge(other_element));
      }
      this.inEdges = __this__inEdges;
    }
  }

  public TVertex deepCopy() {
    return new TVertex(this);
  }

  @Override
  public void clear() {
    setRhinoIdIsSet(false);
    this.rhinoId = 0;
    setTitanIdIsSet(false);
    this.titanId = 0;
    this.properties = null;
    this.outEdges = null;
    this.inEdges = null;
  }

  public long getRhinoId() {
    return this.rhinoId;
  }

  public TVertex setRhinoId(long rhinoId) {
    this.rhinoId = rhinoId;
    setRhinoIdIsSet(true);
    return this;
  }

  public void unsetRhinoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RHINOID_ISSET_ID);
  }

  /** Returns true if field rhinoId is set (has been assigned a value) and false otherwise */
  public boolean isSetRhinoId() {
    return EncodingUtils.testBit(__isset_bitfield, __RHINOID_ISSET_ID);
  }

  public void setRhinoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RHINOID_ISSET_ID, value);
  }

  public long getTitanId() {
    return this.titanId;
  }

  public TVertex setTitanId(long titanId) {
    this.titanId = titanId;
    setTitanIdIsSet(true);
    return this;
  }

  public void unsetTitanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TITANID_ISSET_ID);
  }

  /** Returns true if field titanId is set (has been assigned a value) and false otherwise */
  public boolean isSetTitanId() {
    return EncodingUtils.testBit(__isset_bitfield, __TITANID_ISSET_ID);
  }

  public void setTitanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TITANID_ISSET_ID, value);
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, Item val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,Item>();
    }
    this.properties.put(key, val);
  }

  public Map<String,Item> getProperties() {
    return this.properties;
  }

  public TVertex setProperties(Map<String,Item> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getOutEdgesSize() {
    return (this.outEdges == null) ? 0 : this.outEdges.size();
  }

  public java.util.Iterator<TEdge> getOutEdgesIterator() {
    return (this.outEdges == null) ? null : this.outEdges.iterator();
  }

  public void addToOutEdges(TEdge elem) {
    if (this.outEdges == null) {
      this.outEdges = new ArrayList<TEdge>();
    }
    this.outEdges.add(elem);
  }

  public List<TEdge> getOutEdges() {
    return this.outEdges;
  }

  public TVertex setOutEdges(List<TEdge> outEdges) {
    this.outEdges = outEdges;
    return this;
  }

  public void unsetOutEdges() {
    this.outEdges = null;
  }

  /** Returns true if field outEdges is set (has been assigned a value) and false otherwise */
  public boolean isSetOutEdges() {
    return this.outEdges != null;
  }

  public void setOutEdgesIsSet(boolean value) {
    if (!value) {
      this.outEdges = null;
    }
  }

  public int getInEdgesSize() {
    return (this.inEdges == null) ? 0 : this.inEdges.size();
  }

  public java.util.Iterator<TEdge> getInEdgesIterator() {
    return (this.inEdges == null) ? null : this.inEdges.iterator();
  }

  public void addToInEdges(TEdge elem) {
    if (this.inEdges == null) {
      this.inEdges = new ArrayList<TEdge>();
    }
    this.inEdges.add(elem);
  }

  public List<TEdge> getInEdges() {
    return this.inEdges;
  }

  public TVertex setInEdges(List<TEdge> inEdges) {
    this.inEdges = inEdges;
    return this;
  }

  public void unsetInEdges() {
    this.inEdges = null;
  }

  /** Returns true if field inEdges is set (has been assigned a value) and false otherwise */
  public boolean isSetInEdges() {
    return this.inEdges != null;
  }

  public void setInEdgesIsSet(boolean value) {
    if (!value) {
      this.inEdges = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RHINO_ID:
      if (value == null) {
        unsetRhinoId();
      } else {
        setRhinoId((Long)value);
      }
      break;

    case TITAN_ID:
      if (value == null) {
        unsetTitanId();
      } else {
        setTitanId((Long)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,Item>)value);
      }
      break;

    case OUT_EDGES:
      if (value == null) {
        unsetOutEdges();
      } else {
        setOutEdges((List<TEdge>)value);
      }
      break;

    case IN_EDGES:
      if (value == null) {
        unsetInEdges();
      } else {
        setInEdges((List<TEdge>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RHINO_ID:
      return Long.valueOf(getRhinoId());

    case TITAN_ID:
      return Long.valueOf(getTitanId());

    case PROPERTIES:
      return getProperties();

    case OUT_EDGES:
      return getOutEdges();

    case IN_EDGES:
      return getInEdges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RHINO_ID:
      return isSetRhinoId();
    case TITAN_ID:
      return isSetTitanId();
    case PROPERTIES:
      return isSetProperties();
    case OUT_EDGES:
      return isSetOutEdges();
    case IN_EDGES:
      return isSetInEdges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVertex)
      return this.equals((TVertex)that);
    return false;
  }

  public boolean equals(TVertex that) {
    if (that == null)
      return false;

    boolean this_present_rhinoId = true && this.isSetRhinoId();
    boolean that_present_rhinoId = true && that.isSetRhinoId();
    if (this_present_rhinoId || that_present_rhinoId) {
      if (!(this_present_rhinoId && that_present_rhinoId))
        return false;
      if (this.rhinoId != that.rhinoId)
        return false;
    }

    boolean this_present_titanId = true && this.isSetTitanId();
    boolean that_present_titanId = true && that.isSetTitanId();
    if (this_present_titanId || that_present_titanId) {
      if (!(this_present_titanId && that_present_titanId))
        return false;
      if (this.titanId != that.titanId)
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_outEdges = true && this.isSetOutEdges();
    boolean that_present_outEdges = true && that.isSetOutEdges();
    if (this_present_outEdges || that_present_outEdges) {
      if (!(this_present_outEdges && that_present_outEdges))
        return false;
      if (!this.outEdges.equals(that.outEdges))
        return false;
    }

    boolean this_present_inEdges = true && this.isSetInEdges();
    boolean that_present_inEdges = true && that.isSetInEdges();
    if (this_present_inEdges || that_present_inEdges) {
      if (!(this_present_inEdges && that_present_inEdges))
        return false;
      if (!this.inEdges.equals(that.inEdges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_rhinoId = true && (isSetRhinoId());
    builder.append(present_rhinoId);
    if (present_rhinoId)
      builder.append(rhinoId);

    boolean present_titanId = true && (isSetTitanId());
    builder.append(present_titanId);
    if (present_titanId)
      builder.append(titanId);

    boolean present_properties = true && (isSetProperties());
    builder.append(present_properties);
    if (present_properties)
      builder.append(properties);

    boolean present_outEdges = true && (isSetOutEdges());
    builder.append(present_outEdges);
    if (present_outEdges)
      builder.append(outEdges);

    boolean present_inEdges = true && (isSetInEdges());
    builder.append(present_inEdges);
    if (present_inEdges)
      builder.append(inEdges);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TVertex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRhinoId()).compareTo(other.isSetRhinoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRhinoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rhinoId, other.rhinoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitanId()).compareTo(other.isSetTitanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titanId, other.titanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutEdges()).compareTo(other.isSetOutEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outEdges, other.outEdges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInEdges()).compareTo(other.isSetInEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inEdges, other.inEdges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVertex(");
    boolean first = true;

    if (isSetRhinoId()) {
      sb.append("rhinoId:");
      sb.append(this.rhinoId);
      first = false;
    }
    if (isSetTitanId()) {
      if (!first) sb.append(", ");
      sb.append("titanId:");
      sb.append(this.titanId);
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetOutEdges()) {
      if (!first) sb.append(", ");
      sb.append("outEdges:");
      if (this.outEdges == null) {
        sb.append("null");
      } else {
        sb.append(this.outEdges);
      }
      first = false;
    }
    if (isSetInEdges()) {
      if (!first) sb.append(", ");
      sb.append("inEdges:");
      if (this.inEdges == null) {
        sb.append("null");
      } else {
        sb.append(this.inEdges);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVertexStandardSchemeFactory implements SchemeFactory {
    public TVertexStandardScheme getScheme() {
      return new TVertexStandardScheme();
    }
  }

  private static class TVertexStandardScheme extends StandardScheme<TVertex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVertex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RHINO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rhinoId = iprot.readI64();
              struct.setRhinoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.titanId = iprot.readI64();
              struct.setTitanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.properties = new HashMap<String,Item>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  Item _val13;
                  _key12 = iprot.readString();
                  _val13 = new Item();
                  _val13.read(iprot);
                  struct.properties.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUT_EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.outEdges = new ArrayList<TEdge>(_list14.size);
                for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                {
                  TEdge _elem16;
                  _elem16 = new TEdge();
                  _elem16.read(iprot);
                  struct.outEdges.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setOutEdgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IN_EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.inEdges = new ArrayList<TEdge>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  TEdge _elem19;
                  _elem19 = new TEdge();
                  _elem19.read(iprot);
                  struct.inEdges.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setInEdgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVertex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRhinoId()) {
        oprot.writeFieldBegin(RHINO_ID_FIELD_DESC);
        oprot.writeI64(struct.rhinoId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTitanId()) {
        oprot.writeFieldBegin(TITAN_ID_FIELD_DESC);
        oprot.writeI64(struct.titanId);
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
            for (Map.Entry<String, Item> _iter20 : struct.properties.entrySet())
            {
              oprot.writeString(_iter20.getKey());
              _iter20.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outEdges != null) {
        if (struct.isSetOutEdges()) {
          oprot.writeFieldBegin(OUT_EDGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outEdges.size()));
            for (TEdge _iter21 : struct.outEdges)
            {
              _iter21.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.inEdges != null) {
        if (struct.isSetInEdges()) {
          oprot.writeFieldBegin(IN_EDGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inEdges.size()));
            for (TEdge _iter22 : struct.inEdges)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVertexTupleSchemeFactory implements SchemeFactory {
    public TVertexTupleScheme getScheme() {
      return new TVertexTupleScheme();
    }
  }

  private static class TVertexTupleScheme extends TupleScheme<TVertex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVertex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRhinoId()) {
        optionals.set(0);
      }
      if (struct.isSetTitanId()) {
        optionals.set(1);
      }
      if (struct.isSetProperties()) {
        optionals.set(2);
      }
      if (struct.isSetOutEdges()) {
        optionals.set(3);
      }
      if (struct.isSetInEdges()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRhinoId()) {
        oprot.writeI64(struct.rhinoId);
      }
      if (struct.isSetTitanId()) {
        oprot.writeI64(struct.titanId);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, Item> _iter23 : struct.properties.entrySet())
          {
            oprot.writeString(_iter23.getKey());
            _iter23.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetOutEdges()) {
        {
          oprot.writeI32(struct.outEdges.size());
          for (TEdge _iter24 : struct.outEdges)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetInEdges()) {
        {
          oprot.writeI32(struct.inEdges.size());
          for (TEdge _iter25 : struct.inEdges)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVertex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.rhinoId = iprot.readI64();
        struct.setRhinoIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.titanId = iprot.readI64();
        struct.setTitanIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.properties = new HashMap<String,Item>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28;
            Item _val29;
            _key28 = iprot.readString();
            _val29 = new Item();
            _val29.read(iprot);
            struct.properties.put(_key28, _val29);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.outEdges = new ArrayList<TEdge>(_list30.size);
          for (int _i31 = 0; _i31 < _list30.size; ++_i31)
          {
            TEdge _elem32;
            _elem32 = new TEdge();
            _elem32.read(iprot);
            struct.outEdges.add(_elem32);
          }
        }
        struct.setOutEdgesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inEdges = new ArrayList<TEdge>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            TEdge _elem35;
            _elem35 = new TEdge();
            _elem35.read(iprot);
            struct.inEdges.add(_elem35);
          }
        }
        struct.setInEdgesIsSet(true);
      }
    }
  }

}


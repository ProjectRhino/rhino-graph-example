/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rhino.etl.hadoop.graph.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEdge implements org.apache.thrift.TBase<TEdge, TEdge._Fields>, java.io.Serializable, Cloneable, Comparable<TEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEdge");

  private static final org.apache.thrift.protocol.TField LEFT_RHINO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leftRhinoId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LEFT_TITAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leftTitanId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RIGHT_RHINO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rightRhinoId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField RIGHT_TITAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rightTitanId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEdgeTupleSchemeFactory());
  }

  public long leftRhinoId; // optional
  public long leftTitanId; // optional
  public long rightRhinoId; // optional
  public long rightTitanId; // optional
  public String label; // optional
  public Map<String,Item> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_RHINO_ID((short)1, "leftRhinoId"),
    LEFT_TITAN_ID((short)2, "leftTitanId"),
    RIGHT_RHINO_ID((short)3, "rightRhinoId"),
    RIGHT_TITAN_ID((short)4, "rightTitanId"),
    LABEL((short)5, "label"),
    PROPERTIES((short)6, "properties");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_RHINO_ID
          return LEFT_RHINO_ID;
        case 2: // LEFT_TITAN_ID
          return LEFT_TITAN_ID;
        case 3: // RIGHT_RHINO_ID
          return RIGHT_RHINO_ID;
        case 4: // RIGHT_TITAN_ID
          return RIGHT_TITAN_ID;
        case 5: // LABEL
          return LABEL;
        case 6: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFTRHINOID_ISSET_ID = 0;
  private static final int __LEFTTITANID_ISSET_ID = 1;
  private static final int __RIGHTRHINOID_ISSET_ID = 2;
  private static final int __RIGHTTITANID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LEFT_RHINO_ID,_Fields.LEFT_TITAN_ID,_Fields.RIGHT_RHINO_ID,_Fields.RIGHT_TITAN_ID,_Fields.LABEL,_Fields.PROPERTIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_RHINO_ID, new org.apache.thrift.meta_data.FieldMetaData("leftRhinoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEFT_TITAN_ID, new org.apache.thrift.meta_data.FieldMetaData("leftTitanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RIGHT_RHINO_ID, new org.apache.thrift.meta_data.FieldMetaData("rightRhinoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RIGHT_TITAN_ID, new org.apache.thrift.meta_data.FieldMetaData("rightTitanId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEdge.class, metaDataMap);
  }

  public TEdge() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEdge(TEdge other) {
    __isset_bitfield = other.__isset_bitfield;
    this.leftRhinoId = other.leftRhinoId;
    this.leftTitanId = other.leftTitanId;
    this.rightRhinoId = other.rightRhinoId;
    this.rightTitanId = other.rightTitanId;
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetProperties()) {
      Map<String,Item> __this__properties = new HashMap<String,Item>(other.properties.size());
      for (Map.Entry<String, Item> other_element : other.properties.entrySet()) {

        String other_element_key = other_element.getKey();
        Item other_element_value = other_element.getValue();

        String __this__properties_copy_key = other_element_key;

        Item __this__properties_copy_value = new Item(other_element_value);

        __this__properties.put(__this__properties_copy_key, __this__properties_copy_value);
      }
      this.properties = __this__properties;
    }
  }

  public TEdge deepCopy() {
    return new TEdge(this);
  }

  @Override
  public void clear() {
    setLeftRhinoIdIsSet(false);
    this.leftRhinoId = 0;
    setLeftTitanIdIsSet(false);
    this.leftTitanId = 0;
    setRightRhinoIdIsSet(false);
    this.rightRhinoId = 0;
    setRightTitanIdIsSet(false);
    this.rightTitanId = 0;
    this.label = null;
    this.properties = null;
  }

  public long getLeftRhinoId() {
    return this.leftRhinoId;
  }

  public TEdge setLeftRhinoId(long leftRhinoId) {
    this.leftRhinoId = leftRhinoId;
    setLeftRhinoIdIsSet(true);
    return this;
  }

  public void unsetLeftRhinoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTRHINOID_ISSET_ID);
  }

  /** Returns true if field leftRhinoId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftRhinoId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTRHINOID_ISSET_ID);
  }

  public void setLeftRhinoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTRHINOID_ISSET_ID, value);
  }

  public long getLeftTitanId() {
    return this.leftTitanId;
  }

  public TEdge setLeftTitanId(long leftTitanId) {
    this.leftTitanId = leftTitanId;
    setLeftTitanIdIsSet(true);
    return this;
  }

  public void unsetLeftTitanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTTITANID_ISSET_ID);
  }

  /** Returns true if field leftTitanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftTitanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTTITANID_ISSET_ID);
  }

  public void setLeftTitanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTTITANID_ISSET_ID, value);
  }

  public long getRightRhinoId() {
    return this.rightRhinoId;
  }

  public TEdge setRightRhinoId(long rightRhinoId) {
    this.rightRhinoId = rightRhinoId;
    setRightRhinoIdIsSet(true);
    return this;
  }

  public void unsetRightRhinoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHTRHINOID_ISSET_ID);
  }

  /** Returns true if field rightRhinoId is set (has been assigned a value) and false otherwise */
  public boolean isSetRightRhinoId() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHTRHINOID_ISSET_ID);
  }

  public void setRightRhinoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHTRHINOID_ISSET_ID, value);
  }

  public long getRightTitanId() {
    return this.rightTitanId;
  }

  public TEdge setRightTitanId(long rightTitanId) {
    this.rightTitanId = rightTitanId;
    setRightTitanIdIsSet(true);
    return this;
  }

  public void unsetRightTitanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RIGHTTITANID_ISSET_ID);
  }

  /** Returns true if field rightTitanId is set (has been assigned a value) and false otherwise */
  public boolean isSetRightTitanId() {
    return EncodingUtils.testBit(__isset_bitfield, __RIGHTTITANID_ISSET_ID);
  }

  public void setRightTitanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RIGHTTITANID_ISSET_ID, value);
  }

  public String getLabel() {
    return this.label;
  }

  public TEdge setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, Item val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,Item>();
    }
    this.properties.put(key, val);
  }

  public Map<String,Item> getProperties() {
    return this.properties;
  }

  public TEdge setProperties(Map<String,Item> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT_RHINO_ID:
      if (value == null) {
        unsetLeftRhinoId();
      } else {
        setLeftRhinoId((Long)value);
      }
      break;

    case LEFT_TITAN_ID:
      if (value == null) {
        unsetLeftTitanId();
      } else {
        setLeftTitanId((Long)value);
      }
      break;

    case RIGHT_RHINO_ID:
      if (value == null) {
        unsetRightRhinoId();
      } else {
        setRightRhinoId((Long)value);
      }
      break;

    case RIGHT_TITAN_ID:
      if (value == null) {
        unsetRightTitanId();
      } else {
        setRightTitanId((Long)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,Item>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_RHINO_ID:
      return Long.valueOf(getLeftRhinoId());

    case LEFT_TITAN_ID:
      return Long.valueOf(getLeftTitanId());

    case RIGHT_RHINO_ID:
      return Long.valueOf(getRightRhinoId());

    case RIGHT_TITAN_ID:
      return Long.valueOf(getRightTitanId());

    case LABEL:
      return getLabel();

    case PROPERTIES:
      return getProperties();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT_RHINO_ID:
      return isSetLeftRhinoId();
    case LEFT_TITAN_ID:
      return isSetLeftTitanId();
    case RIGHT_RHINO_ID:
      return isSetRightRhinoId();
    case RIGHT_TITAN_ID:
      return isSetRightTitanId();
    case LABEL:
      return isSetLabel();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEdge)
      return this.equals((TEdge)that);
    return false;
  }

  public boolean equals(TEdge that) {
    if (that == null)
      return false;

    boolean this_present_leftRhinoId = true && this.isSetLeftRhinoId();
    boolean that_present_leftRhinoId = true && that.isSetLeftRhinoId();
    if (this_present_leftRhinoId || that_present_leftRhinoId) {
      if (!(this_present_leftRhinoId && that_present_leftRhinoId))
        return false;
      if (this.leftRhinoId != that.leftRhinoId)
        return false;
    }

    boolean this_present_leftTitanId = true && this.isSetLeftTitanId();
    boolean that_present_leftTitanId = true && that.isSetLeftTitanId();
    if (this_present_leftTitanId || that_present_leftTitanId) {
      if (!(this_present_leftTitanId && that_present_leftTitanId))
        return false;
      if (this.leftTitanId != that.leftTitanId)
        return false;
    }

    boolean this_present_rightRhinoId = true && this.isSetRightRhinoId();
    boolean that_present_rightRhinoId = true && that.isSetRightRhinoId();
    if (this_present_rightRhinoId || that_present_rightRhinoId) {
      if (!(this_present_rightRhinoId && that_present_rightRhinoId))
        return false;
      if (this.rightRhinoId != that.rightRhinoId)
        return false;
    }

    boolean this_present_rightTitanId = true && this.isSetRightTitanId();
    boolean that_present_rightTitanId = true && that.isSetRightTitanId();
    if (this_present_rightTitanId || that_present_rightTitanId) {
      if (!(this_present_rightTitanId && that_present_rightTitanId))
        return false;
      if (this.rightTitanId != that.rightTitanId)
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_leftRhinoId = true && (isSetLeftRhinoId());
    builder.append(present_leftRhinoId);
    if (present_leftRhinoId)
      builder.append(leftRhinoId);

    boolean present_leftTitanId = true && (isSetLeftTitanId());
    builder.append(present_leftTitanId);
    if (present_leftTitanId)
      builder.append(leftTitanId);

    boolean present_rightRhinoId = true && (isSetRightRhinoId());
    builder.append(present_rightRhinoId);
    if (present_rightRhinoId)
      builder.append(rightRhinoId);

    boolean present_rightTitanId = true && (isSetRightTitanId());
    builder.append(present_rightTitanId);
    if (present_rightTitanId)
      builder.append(rightTitanId);

    boolean present_label = true && (isSetLabel());
    builder.append(present_label);
    if (present_label)
      builder.append(label);

    boolean present_properties = true && (isSetProperties());
    builder.append(present_properties);
    if (present_properties)
      builder.append(properties);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLeftRhinoId()).compareTo(other.isSetLeftRhinoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftRhinoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftRhinoId, other.leftRhinoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftTitanId()).compareTo(other.isSetLeftTitanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftTitanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftTitanId, other.leftTitanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightRhinoId()).compareTo(other.isSetRightRhinoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightRhinoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightRhinoId, other.rightRhinoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRightTitanId()).compareTo(other.isSetRightTitanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRightTitanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rightTitanId, other.rightTitanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEdge(");
    boolean first = true;

    if (isSetLeftRhinoId()) {
      sb.append("leftRhinoId:");
      sb.append(this.leftRhinoId);
      first = false;
    }
    if (isSetLeftTitanId()) {
      if (!first) sb.append(", ");
      sb.append("leftTitanId:");
      sb.append(this.leftTitanId);
      first = false;
    }
    if (isSetRightRhinoId()) {
      if (!first) sb.append(", ");
      sb.append("rightRhinoId:");
      sb.append(this.rightRhinoId);
      first = false;
    }
    if (isSetRightTitanId()) {
      if (!first) sb.append(", ");
      sb.append("rightTitanId:");
      sb.append(this.rightTitanId);
      first = false;
    }
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEdgeStandardSchemeFactory implements SchemeFactory {
    public TEdgeStandardScheme getScheme() {
      return new TEdgeStandardScheme();
    }
  }

  private static class TEdgeStandardScheme extends StandardScheme<TEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_RHINO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leftRhinoId = iprot.readI64();
              struct.setLeftRhinoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEFT_TITAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leftTitanId = iprot.readI64();
              struct.setLeftTitanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RIGHT_RHINO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rightRhinoId = iprot.readI64();
              struct.setRightRhinoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RIGHT_TITAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rightTitanId = iprot.readI64();
              struct.setRightTitanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.properties = new HashMap<String,Item>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  Item _val3;
                  _key2 = iprot.readString();
                  _val3 = new Item();
                  _val3.read(iprot);
                  struct.properties.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLeftRhinoId()) {
        oprot.writeFieldBegin(LEFT_RHINO_ID_FIELD_DESC);
        oprot.writeI64(struct.leftRhinoId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeftTitanId()) {
        oprot.writeFieldBegin(LEFT_TITAN_ID_FIELD_DESC);
        oprot.writeI64(struct.leftTitanId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRightRhinoId()) {
        oprot.writeFieldBegin(RIGHT_RHINO_ID_FIELD_DESC);
        oprot.writeI64(struct.rightRhinoId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRightTitanId()) {
        oprot.writeFieldBegin(RIGHT_TITAN_ID_FIELD_DESC);
        oprot.writeI64(struct.rightTitanId);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.properties.size()));
            for (Map.Entry<String, Item> _iter4 : struct.properties.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              _iter4.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEdgeTupleSchemeFactory implements SchemeFactory {
    public TEdgeTupleScheme getScheme() {
      return new TEdgeTupleScheme();
    }
  }

  private static class TEdgeTupleScheme extends TupleScheme<TEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLeftRhinoId()) {
        optionals.set(0);
      }
      if (struct.isSetLeftTitanId()) {
        optionals.set(1);
      }
      if (struct.isSetRightRhinoId()) {
        optionals.set(2);
      }
      if (struct.isSetRightTitanId()) {
        optionals.set(3);
      }
      if (struct.isSetLabel()) {
        optionals.set(4);
      }
      if (struct.isSetProperties()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLeftRhinoId()) {
        oprot.writeI64(struct.leftRhinoId);
      }
      if (struct.isSetLeftTitanId()) {
        oprot.writeI64(struct.leftTitanId);
      }
      if (struct.isSetRightRhinoId()) {
        oprot.writeI64(struct.rightRhinoId);
      }
      if (struct.isSetRightTitanId()) {
        oprot.writeI64(struct.rightTitanId);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, Item> _iter5 : struct.properties.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            _iter5.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.leftRhinoId = iprot.readI64();
        struct.setLeftRhinoIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.leftTitanId = iprot.readI64();
        struct.setLeftTitanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rightRhinoId = iprot.readI64();
        struct.setRightRhinoIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rightTitanId = iprot.readI64();
        struct.setRightTitanIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.properties = new HashMap<String,Item>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            Item _val9;
            _key8 = iprot.readString();
            _val9 = new Item();
            _val9.read(iprot);
            struct.properties.put(_key8, _val9);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

}

